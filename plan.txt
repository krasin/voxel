Minimum Viable Product for 3d print optimizer.

1. A simple website (AppEngine) that allows to upload a mesh, stores it in the blob, adds a task for worker. Worker will download the blob and upload the result.

2. Worker

- gets the task from the frontend
- downloads the blob
- converts to .schematic voxel file
- runs optimizer (.npts)
- runs PoissonSurface reconstruction (.ply is the output format)
- converts .ply to .stl
- uploads the blob and reports the success


Stage 0: be able to optimize "by hand".
Pipeline:

1. binvox
2. optimize
3. PoissonRecon
4. meshlab

Missing piece: optimize.

Optimize plan:

1. Parse .schematic file (done)
2. Write .npts (done)
3. Remove deep voxels (done)
4. Make a hole (done)
5. Implement voxelization

Esoteric knowledge:

1. ClipTriangle is broken. See the tests
2. Wavelet rasterization: triangle should go into one octant if it's exactly on the side to avoid double counting.
3. Wavelet rasterization: formulas for 3d case are suspicious in the article, because {K,L}_{y,z} are not used.

Rasterization is hard. 
1. Evaluate binvox again. Probably, it has an appropriate output format.
2. Need to find another rasterizer (an utility or the library), if binvox is not an option

TODO: implement rasterizer later, much later.

Naive rasterizer, issues:
1. Internal hollows are filled
2. Edge is not continuous
