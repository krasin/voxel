Current plan:

goal: refine the code to use it as a library for things, like 3d print optimizer or mold generation.

current task: reconstruction of the surface.

status: marching cubes are already ported.
Now, need a good way to build an iso-surface.

Proposal:

1. Find all points on depth >= R
2. Draw metaballs with r0=R and formula (1-r/r0^2)^2, if r < r0.
3. Run maching cubes on iso-surface built with metaballs.

This will not preserve sharp edges.

In order to fix that, the following advance operation is proposed:

1. Invert the space
2. Draw metaballs like above
3. Run PoissonRecon or similar algorithm, which will preserve sharp edges.
4. Invert normals (this will invert the space back).

The inversion will only preserve outer sharp edges and will make inner sharp edges to of radius R.
This is considered normal.

==== Old plan (2011) ===

Minimum Viable Product for 3d print optimizer.

1. A simple website (AppEngine) that allows to upload a mesh, stores it in the blob, adds a task for worker. Worker will download the blob and upload the result.

2. Worker

- gets the task from the frontend
- downloads the blob
- converts to .schematic voxel file
- runs optimizer (.npts)
- runs PoissonSurface reconstruction (.ply is the output format)
- converts .ply to .stl
- uploads the blob and reports the success


Stage 0: be able to optimize "by hand".
Pipeline:

1. optimize
2. PoissonRecon
3. meshlab

Ideally, optimize should also be able to output .stl and not require PoissonRecon/meshlab.

Optimize plan:

1. Parse .schematic file (done)
2. Write .npts (done)
3. Remove deep voxels (done)
4. Make a hole (done, but the algorithm should be better)
5. Implement voxelization (almost done)

Rasterizer is now almost ready. The only known issue (except that the speed is still suboptimal) is that it does not handle leaky STL models.

Plan for voxelizer:

0. Fix triangle rasterization: it's slow and it draws the triangle out of bounds.
1. Make it a library
2. Make a command line utility (golvox.com is taken)
3. Prepare binaries for Linux (standalone binary), Windows and (maybe) MacOS.
4. Set up the website
5. Make a service for public use (it's unclear, what's better: free or require to pay with bitcoins/whatever.)

